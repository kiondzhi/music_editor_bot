import telebot
from telebot import types

# –¢–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
TOKEN = '7829141390:AAESO3tUmEebNfLdSg6xGEtSFwh2KTPG69c'
bot = telebot.TeleBot(TOKEN)

# –ö–∞–Ω–∞–ª—ã —Å ID –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
CHANNELS = ['@thijaeiopthapeotjhteahte', '@second2fasgdsfsafdsa', '@three3gafdgfdsg']

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –≤ –º–∞—Å—Å–∏–≤
user_languages = {}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
welcome_message_id = {}
subscribe_message_id = {}
not_subscribed_message_id = {}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup()

    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    btn_rus = types.InlineKeyboardButton('üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data='language_rus')
    btn_eng = types.InlineKeyboardButton('üá∫üá∏ English', callback_data='language_eng')
    markup.add(btn_rus, btn_eng)

    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = bot.send_message(message.chat.id, "*Please select a language!*", reply_markup=markup, parse_mode='Markdown')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤
    welcome_message_id[message.chat.id] = msg.message_id

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@bot.callback_query_handler(func=lambda call: call.data in ['language_rus', 'language_eng'])
def handle_language_choice(call):
    language = 'üá∑üá∫ –†—É—Å—Å–∫–∏–π' if call.data == 'language_rus' else 'üá∫üá∏ English'
    user_languages[call.from_user.id] = language # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
    bot.delete_message(call.message.chat.id, welcome_message_id[call.message.chat.id])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    check_subscribes(call.message, language)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
def check_subscribes(message, language):
    markup = types.InlineKeyboardMarkup()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        channel_one = types.InlineKeyboardButton("1 ‚Äî –ö–∞–Ω–∞–ª", url="https://t.me/+U0-oRzG5zeFjYjY6")
        channel_two = types.InlineKeyboardButton("2 ‚Äî –ö–∞–Ω–∞–ª", url="https://t.me/+rTQWzQy9sEc3ZWIy")
        channel_three = types.InlineKeyboardButton("3 ‚Äî –ö–∞–Ω–∞–ª", url="https://t.me/+pvesJQY0fzk2YzZi")
    elif language == 'üá∫üá∏ English':
        channel_one = types.InlineKeyboardButton("1 ‚Äî Channel", url="https://t.me/+U0-oRzG5zeFjYjY6")
        channel_two = types.InlineKeyboardButton("2 ‚Äî Channel", url="https://t.me/+rTQWzQy9sEc3ZWIy")
        channel_three = types.InlineKeyboardButton("3 ‚Äî Channel", url="https://t.me/+pvesJQY0fzk2YzZi")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
    if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        check_btn = types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_subscription")
    elif language == 'üá∫üá∏ English':
        check_btn = types.InlineKeyboardButton("Check subscriptions", callback_data="check_subscription")

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
    markup.add(channel_one, channel_two, channel_three, check_btn)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        msg = bot.send_message(message.chat.id, "*–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã* üëáüèª", reply_markup=markup, parse_mode='Markdown')
    elif language == 'üá∫üá∏ English':
        msg = bot.send_message(message.chat.id, "*To continue, please subscribe to the channels* üëáüèª", reply_markup=markup, parse_mode='Markdown')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –Ω–∞ –∫–∞–Ω–∞–ª—ã –≤ –º–∞—Å—Å–∏–≤
    subscribe_message_id[message.chat.id] = msg.message_id

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def verify_subscription(call):
    user_id = call.from_user.id
    subscribed_channels = is_user_subscribed(user_id)

    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –º–∞—Å—Å–∏–≤–∞
    language = user_languages.get(user_id)

    if len(subscribed_channels) == len(CHANNELS):
        if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            bot.delete_message(call.message.chat.id, subscribe_message_id[call.message.chat.id]) # –£–¥–∞–ª—è–µ–º –º–µ–Ω—é—à–∫—É –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª—ã
            bot.send_message(call.message.chat.id, "*–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º.*", parse_mode='Markdown')
        elif language == 'üá∫üá∏ English':
            bot.delete_message(call.message.chat.id, subscribe_message_id[call.message.chat.id]) # –£–¥–∞–ª—è–µ–º –º–µ–Ω—é—à–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª—ã
            bot.send_message(call.message.chat.id, "*You are subscribed to all channels! Now you can use this bot.*", parse_mode='Markdown')
    else:
        not_subscribed = set(CHANNELS) - set(subscribed_channels)
        if language == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            not_subscribed_msg = bot.send_message(call.message.chat.id, f"*–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã: {', '.join(not_subscribed)}.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∏—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.*", parse_mode='Markdown')
            not_subscribed_message_id[call.message.chat.id] = not_subscribed_msg.message_id # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª—ã
        elif language == 'üá∫üá∏ English':
            not_subscribed_msg = bot.send_message(call.message.chat.id, f"*You are not subscribed to the following channels: {', '.join(not_subscribed)}.\nPlease subscribe to them to get access to the bot.*", parse_mode='Markdown')
            not_subscribed_message_id[call.message.chat.id] = not_subscribed_msg.message_id # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª—ã

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø–æ–¥–ø–∏—Å–∫–µ
    if len(subscribed_channels) == len(CHANNELS) and call.message.chat.id in not_subscribed_message_id: 
        bot.delete_message(call.message.chat.id, not_subscribed_message_id[call.message.chat.id]) 
        del not_subscribed_message_id[call.message.chat.id] # –£–¥–∞–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª—ã

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def is_user_subscribed(user_id):
    subscribed = []
    for channel in CHANNELS:
        try:
            chat_member = bot.get_chat_member(channel, user_id)
            if chat_member.status in ['member', 'administrator', 'creator']:
                subscribed.append(channel)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {channel}: {e}")
    return subscribed

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()